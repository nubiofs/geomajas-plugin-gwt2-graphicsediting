<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ This is part of Geomajas, a GIS framework, http://www.geomajas.org/.
  ~
  ~ Copyright 2008-2014 Geosparc nv, http://www.geosparc.com/, Belgium.
  ~
  ~ The program is available in open source according to the GNU Affero
  ~ General Public License. All contributions in this program are covered
  ~ by the Geomajas Contributors License Agreement. For full licensing
  ~ details, see LICENSE.txt in the project root.
  -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="chapter-java-howto">
  <title>How-to</title>

  <para>This chapter shows how to work with the <code>GeometryEditable</code>
  interface. Only Graphics Objects that have this interface as a role, will be
  able to be edited.</para>

  <section>
    <title>How to create and store <code>GeometryEditable</code>
    objects</title>

    <para>You will need to define a custom
    <code>AbstractGraphicsObjectContainer</code> to store the created graphics
    objects. This container needs to be linked to the</para>

    <programlisting>// in a constructor: create a GraphicsService object
GraphicsService graphicsService = new GraphicsServiceImpl(eventBus, true, false);

// when map is initialized: (e.g. in onMapInitialized method); make and register object container
annotationContainer = new AbstractGraphicsObjectContainer(eventBus);  // this will have to be an implementation!
annotationContainer.setRootContainer(mapPresenter.getContainerManager().addWorldContainer());
graphicsService.setObjectContainer(annotationContainer);</programlisting>

    <para>Only objects that have <code>GeometryEditable</code> role will
    display the pencil image or the <code>EditAction</code> in their cog
    dropdown menu. There is a default implementation for creating editable
    polygons and lines. This is done using the
    <code>CreateLineController</code> and
    <code>CreatePolygonController</code>, that will alow you to create line or
    polyogon point-by-point, ending in a double click. If you use a button to
    indicate the start of the creation process (like in the screenshot in the
    introduction), this is how you can link a controller to it:</para>

    <programlisting>public void onActionPerformed(.... ) { // e.g. when button is clicked
   graphicsService.start();
   createController = new CreatePolygonController(graphicsService, mapPresenter); // or anothor controller
   graphicsService.getMetaController().setActive(false);
   createController.setActive(true);
}</programlisting>

    <para>When the object has been created, it is automatically added to the
    <code>AbstractGraphicsObjectContainer</code>. You will need to listen to
    the <code>GraphicsObjectContainerEvent</code> that the container throws to
    change the active controller.</para>

    <programlisting>// e.g. in onMapInitialized method:
annotationContainer.addGraphicsObjectContainerHandler(this); // this will ensure automatic registration of created graphics objects
...
public void onAction(GraphicsObjectContainerEvent event) {  // method of GraphicsObjectContainerEvent.Handler
   createController.setActive(false);
   graphicsService.getMetaController().setActive(true);
}</programlisting>
  </section>

  <section>
    <title>How to add the pencil-showing
    <code>GeometryEditController</code></title>

    <para>Register the <code>GeometryEditControllerFactory</code> to the
    <code>GraphicsService</code>.</para>

    <programlisting>graphicsService.registerControllerFactory(new GeometryEditControllerFactory(mapPresenter));</programlisting>
  </section>

  <section>
    <title>How to add the cog menu and registrate the
    <code>EditAction</code></title>

    <para>The editing action is registered as any other action, in the
    <code>PopupMenuControllerFactory</code>. The actions registered in the
    <code>PopupMenuControllerFactory</code> are shown in the cog dropdown
    menu.</para>

    <programlisting>PopupMenuControllerFactory popupFactory = new PopupMenuControllerFactory(new PopupMenuFactory(), 1.3, 1.3);
popupFactory.registerAction(new EditAction(mapPresenter)); // registration of the editing action
... // register other actions or editors
graphicsService.registerControllerFactory(popupFactory);</programlisting>
  </section>

  <section>
    <title>How to change the position of the pencil or cog item</title>

    <para>In the constructor of both the
    <code>GeometryEditControllerFactory</code> and PopupMenuControllerFactory,
    you can add two offset parameters. In the code above, two values 1.3 are
    provided. The first value is the x-offset of the pencil or cog image, the
    second is the y-offset. The values indicate the amount of times the image
    is translated away from the graphics object. This means e.g. the larger
    the x-value, the more to the left it will appear. The larger the y value,
    the higher the cog or pencil will appear. The translation unit is the size
    of the pencil/cog.</para>

    <para>Here is the code to set the position of the pencil image of the
    edit-controller system. If you don't provide offset parameters to the
    GeometryEditControllerFactory (see previous example), value 1.3 is used
    for x- and y-offset, resulting in position just outside the resize
    box.</para>

    <programlisting>graphicsService.registerControllerFactory(new GeometryEditControllerFactory(mapPresenter, 0, 1.3));</programlisting>

    <screenshot>
      <screeninfo>The pencil image for position x=0 y=1.3.</screeninfo>

      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/graphicsediting_position_pencil.png" />
        </imageobject>
      </mediaobject>
    </screenshot>
  </section>

  <section>
    <title>How to change the fill and stroke parameters of created
    polygons/lines</title>

    <para>To change the default fill and stroke paramters of polygons or lines
    when they are created, use the static setting methods of
    <code>GraphicsEditingUtil</code>.</para>

    <programlisting>// some examples:
GraphicsEditingUtil.setPolygonCreateFillColor("red");
GraphicsEditingUtil.setPolygonCreateStrokeColor("yellow");
GraphicsEditingUtil.setLineCreateStrokeOpacity(0.5);
GraphicsEditingUtil.setLineCreateStrokeWidth(5);</programlisting>

    <screenshot>
      <screeninfo>Result of changes in fill and stroke values.</screeninfo>

      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/graphicsediting_fillstroke.png" />
        </imageobject>
      </mediaobject>
    </screenshot>
  </section>

  <section>
    <title>How to create custom <code>GeometryEditable</code> objects</title>

    <para>You will need to perfom the follwing:</para>

    <itemizedlist>
      <listitem>
        <para>Create the object that has the GeometryEditable role . See
        Graphics projects documentation for the how-to on this. Inspiration:
        <code>GGeometryPath</code>.</para>
      </listitem>

      <listitem>
        <para>Create a controller for the creation of the object extending
        <code>AbstractGraphicsController</code>. It will define what actions
        to perform when the controller is activated. Inspiration:
        <code>CreateLineController</code> and
        <code>CreatePolygonController.</code></para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>How to create a custum action</title>

    <para>This is related to the documentation of the Graphics Project. You will need to define an action class, that defines what happens when it is executed and when the action needs to be undone. </para>

    <para>Inspiration: <code>EditAction</code>.</para>

  </section>
</chapter>
